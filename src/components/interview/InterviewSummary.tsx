import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  Trophy,
  Target,
  BookOpen,
  RotateCcw,
  Home,
  TrendingUp,
  TrendingDown,
  Star,
  CheckCircle,
  AlertCircle,
  Download,
} from "lucide-react";

interface InterviewSummary {
  overallScore: number;
  strengths: string[];
  improvements: string[];
  questions: Array<{
    question: string;
    answer: string;
    score: number;
    feedback: string;
  }>;
}

interface InterviewSummaryProps {
  summary: InterviewSummary;
  role: string;
  mode: string;
  onStartNew: () => void;
  onGoHome: () => void;
  onViewResources?: () => void;
}

const getScoreColor = (score: number) => {
  if (score >= 8) return "success";
  if (score >= 6) return "warning";
  return "destructive";
};

const getScoreLabel = (score: number) => {
  if (score >= 9) return "Outstanding";
  if (score >= 8) return "Excellent";
  if (score >= 7) return "Good";
  if (score >= 6) return "Fair";
  if (score >= 5) return "Needs Improvement";
  return "Poor";
};

const exportToPDF = (summary: InterviewSummary, role: string, mode: string) => {
  const content = `
INTERVIEW PREPARATION SUMMARY
=============================

Role: ${role}
Mode: ${mode === "technical" ? "Technical" : "Behavioral"} Interview
Overall Score: ${summary.overallScore}/10 (${getScoreLabel(
    summary.overallScore
  )})
Date: ${new Date().toLocaleDateString()}

STRENGTHS:
${summary.strengths.map((s) => `• ${s}`).join("\n")}

AREAS FOR IMPROVEMENT:
${summary.improvements.map((i) => `• ${i}`).join("\n")}

QUESTION BREAKDOWN:
${summary.questions
  .map(
    (q, i) => `
Q${i + 1}: ${q.question}
Your Answer: ${q.answer}
Score: ${q.score}/10
Feedback: ${q.feedback}
`
  )
  .join("\n")}

Generated by Interview Preparation Bot
`;

  const blob = new Blob([content], { type: "text/plain" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `interview-summary-${role}-${mode}-${Date.now()}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

export default function InterviewSummary({
  summary,
  role,
  mode,
  onStartNew,
  onGoHome,
  onViewResources,
}: InterviewSummaryProps) {
  const averageScore = summary.overallScore;
  const scoreColor = getScoreColor(averageScore);
  const scoreLabel = getScoreLabel(averageScore);

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      <div className="text-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4">
          <Trophy className="w-8 h-8 text-primary" />
        </div>
        <h1 className="text-4xl font-bold text-foreground mb-4">
          Interview Complete!
        </h1>
        <p className="text-xl text-muted-foreground">
          Here's your detailed performance summary and feedback
        </p>
      </div>

      {/* Overall Score Card */}
      <Card className="mb-8 card-gradient border-0">
        <CardHeader className="text-center pb-6">
          <CardTitle className="text-2xl">Overall Performance</CardTitle>
          <CardDescription>
            {mode === "technical" ? "Technical" : "Behavioral"} Interview •{" "}
            {role}
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center space-y-6">
          <div className="relative">
            <div className="text-6xl font-bold text-primary mb-2">
              {averageScore}/10
            </div>
            <Badge
              variant={
                scoreColor === "success"
                  ? "default"
                  : scoreColor === "warning"
                  ? "secondary"
                  : "destructive"
              }
              className="text-lg px-4 py-1"
            >
              {scoreLabel}
            </Badge>
          </div>

          <div className="max-w-md mx-auto">
            <div className="flex justify-between text-sm text-muted-foreground mb-2">
              <span>Progress</span>
              <span>{averageScore * 10}%</span>
            </div>
            <Progress value={averageScore * 10} className="h-3" />
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        {/* Strengths */}
        <Card className="card-gradient border-0">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-success">
              <TrendingUp className="w-5 h-5" />
              Strengths
            </CardTitle>
            <CardDescription>Areas where you performed well</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {summary.strengths.map((strength, index) => (
                <div key={index} className="flex items-start gap-3">
                  <CheckCircle className="w-5 h-5 text-success mt-0.5 flex-shrink-0" />
                  <span className="text-sm">{strength}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Areas for Improvement */}
        <Card className="card-gradient border-0">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-improvement">
              <TrendingDown className="w-5 h-5" />
              Areas for Improvement
            </CardTitle>
            <CardDescription>
              Focus areas for your next practice session
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {summary.improvements.map((improvement, index) => (
                <div key={index} className="flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-improvement mt-0.5 flex-shrink-0" />
                  <span className="text-sm">{improvement}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Question Breakdown */}
      <Card className="mb-8 card-gradient border-0">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Question-by-Question Breakdown
          </CardTitle>
          <CardDescription>Detailed feedback for each question</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {summary.questions.map((q, index) => (
              <div
                key={index}
                className="border-l-2 border-primary/20 pl-4 space-y-3"
              >
                <div className="flex items-start justify-between gap-4">
                  <div className="flex-1">
                    <h4 className="font-medium text-sm mb-2">
                      Question {index + 1}
                    </h4>
                    <p className="text-sm text-muted-foreground mb-3">
                      {q.question}
                    </p>
                  </div>
                  <div className="flex items-center gap-2 flex-shrink-0">
                    <Star className="w-4 h-4 text-warning" />
                    <span className="font-semibold">{q.score}/10</span>
                  </div>
                </div>

                <div className="bg-muted/30 rounded-lg p-3">
                  <p className="text-sm font-medium mb-1">Your Answer:</p>
                  <p className="text-sm text-muted-foreground italic">
                    "{q.answer.substring(0, 100)}
                    {q.answer.length > 100 ? "..." : ""}"
                  </p>
                </div>

                <div className="bg-primary/5 rounded-lg p-3">
                  <p className="text-sm font-medium mb-1">Feedback:</p>
                  <p className="text-sm">{q.feedback}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <Button
          onClick={onStartNew}
          className="transition-bounce hover:scale-105"
          size="lg"
        >
          <RotateCcw className="w-5 h-5 mr-2" />
          Practice Again
        </Button>

        <Button
          variant="outline"
          onClick={onGoHome}
          size="lg"
          className="hover:bg-primary/10"
        >
          <Home className="w-5 h-5 mr-2" />
          Back to Home
        </Button>

        <Button
          variant="outline"
          size="lg"
          className="hover:bg-primary/10"
          onClick={() => exportToPDF(summary, role, mode)}
        >
          <Download className="w-5 h-5 mr-2" />
          Export Summary
        </Button>

        {onViewResources && (
          <Button
            variant="outline"
            size="lg"
            className="hover:bg-primary/10"
            onClick={onViewResources}
          >
            <BookOpen className="w-5 h-5 mr-2" />
            Study Resources
          </Button>
        )}
      </div>
    </div>
  );
}
